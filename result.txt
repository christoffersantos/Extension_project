Vou adicionar um player de vídeo personalizado, sistema de marcação de aulas assistidas e favoritos usando localStorage. Vou atualizar os arquivos necessários:

=== Start File ===
lib/data.ts
---
export interface Theme {
  id: string;
  title: string;
  description: string;
  color: string;
  lessons: Lesson[];
}

export interface Lesson {
  id: string;
  themeId: string;
  title: string;
  description: string;
  content: {
    type: 'video';
    videoUrl: string;
    duration: string;
    thumbnail: string;
  };
}

export const themes: Theme[] = [
  {
    id: "basic",
    title: "Informática Básica",
    description: "Aprenda os fundamentos do computador",
    color: "theme-1",
    lessons: [
      {
        id: "basic-1",
        themeId: "basic",
        title: "Introdução ao Computador",
        description: "Conheça as partes básicas do computador",
        content: {
          type: "video",
          videoUrl: "https://www.youtube.com/embed/dQw4w9WgXcQ",
          duration: "10:00",
          thumbnail: "https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg"
        }
      },
      {
        id: "basic-2",
        themeId: "basic",
        title: "Como usar o Mouse",
        description: "Aprenda a usar o mouse corretamente",
        content: {
          type: "video",
          videoUrl: "https://www.youtube.com/embed/dQw4w9WgXcQ",
          duration: "8:30",
          thumbnail: "https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg"
        }
      }
    ]
  },
  {
    id: "internet",
    title: "Internet e E-mail",
    description: "Navegue na internet com segurança",
    color: "theme-2",
    lessons: [
      {
        id: "internet-1",
        themeId: "internet",
        title: "Navegando na Internet",
        description: "Aprenda a usar navegadores web",
        content: {
          type: "video",
          videoUrl: "https://www.youtube.com/embed/dQw4w9WgXcQ",
          duration: "12:00",
          thumbnail: "https://img.youtube.com/vi/dQw4w9WgXcQ/maxresdefault.jpg"
        }
      }
    ]
  }
];
=== End File ===

=== Start File ===
components/ui/video-player.tsx
---
"use client";

import { useState, useEffect } from "react";
import { Heart, Check } from "lucide-react";

interface VideoPlayerProps {
  lessonId: string;
  videoUrl: string;
  title: string;
}

export function VideoPlayer({ lessonId, videoUrl, title }: VideoPlayerProps) {
  const [isWatched, setIsWatched] = useState(false);
  const [isFavorite, setIsFavorite] = useState(false);

  useEffect(() => {
    const watchedLessons = JSON.parse(localStorage.getItem('watchedLessons') || '[]');
    const favoriteLessons = JSON.parse(localStorage.getItem('favoriteLessons') || '[]');
    
    setIsWatched(watchedLessons.includes(lessonId));
    setIsFavorite(favoriteLessons.includes(lessonId));
  }, [lessonId]);

  const toggleWatched = () => {
    const watchedLessons = JSON.parse(localStorage.getItem('watchedLessons') || '[]');
    let newWatchedLessons;

    if (isWatched) {
      newWatchedLessons = watchedLessons.filter((id: string) => id !== lessonId);
    } else {
      newWatchedLessons = [...watchedLessons, lessonId];
    }

    localStorage.setItem('watchedLessons', JSON.stringify(newWatchedLessons));
    setIsWatched(!isWatched);
  };

  const toggleFavorite = () => {
    const favoriteLessons = JSON.parse(localStorage.getItem('favoriteLessons') || '[]');
    let newFavoriteLessons;

    if (isFavorite) {
      newFavoriteLessons = favoriteLessons.filter((id: string) => id !== lessonId);
    } else {
      newFavoriteLessons = [...favoriteLessons, lessonId];
    }

    localStorage.setItem('favoriteLessons', JSON.stringify(newFavoriteLessons));
    setIsFavorite(!isFavorite);
  };

  return (
    <div className="video-player-container">
      <div className="aspect-video rounded-lg overflow-hidden bg-gray-100 mb-4">
        <iframe
          src={videoUrl}
          title={title}
          className="w-full h-full"
          allowFullScreen
          allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
        />
      </div>
      
      <div className="flex justify-between items-center">
        <button
          onClick={toggleWatched}
          className={`button-large flex items-center gap-2 ${
            isWatched ? 'bg-green-500 text-white' : 'bg-gray-200'
          }`}
          aria-label={isWatched ? "Marcar como não assistido" : "Marcar como assistido"}
        >
          <Check className={isWatched ? "text-white" : "text-gray-600"} />
          {isWatched ? "Assistido" : "Marcar como assistido"}
        </button>

        <button
          onClick={toggleFavorite}
          className={`button-large flex items-center gap-2 ${
            isFavorite ? 'bg-red-500 text-white' : 'bg-gray-200'
          }`}
          aria-label={isFavorite ? "Remover dos favoritos" : "Adicionar aos favoritos"}
        >
          <Heart className={isFavorite ? "text-white fill-current" : "text-gray-600"} />
          {isFavorite ? "Favoritado" : "Favoritar"}
        </button>
      </div>
    </div>
  );
}
=== End File ===

=== Start File ===
app/theme/[themeId]/lesson/[lessonId]/page.tsx
---
import { themes } from "@/lib/data";
import { VideoPlayer } from "@/components/ui/video-player";
import Link from "next/link";
import { notFound } from "next/navigation";

export default function LessonPage({
  params,
}: {
  params: { themeId: string; lessonId: string };
}) {
  const theme = themes.find((t) => t.id === params.themeId);
  const lesson = theme?.lessons.find((l) => l.id === params.lessonId);

  if (!theme || !lesson) {
    notFound();
  }

  return (
    <>
      <a href="#main-content" className="skip-link">
        Pular para o conteúdo principal
      </a>
      <main id="main-content" className="container mx-auto px-4 py-8">
        <nav className="mb-6" aria-label="Navegação principal">
          <Link 
            href={`/theme/${theme.id}`} 
            className="button-large bg-gray-200 hover:bg-gray-300 inline-flex items-center"
            aria-label={`Voltar para ${theme.title}`}
          >
            <span aria-hidden="true">←</span>
            <span className="ml-2">Voltar</span>
          </Link>
        </nav>

        <article className="max-w-4xl mx-auto">
          <h1 className="main-heading" tabIndex={0}>{lesson.title}</h1>
          
          <div className="bg-white rounded-xl p-6 shadow-lg">
            <VideoPlayer
              lessonId={lesson.id}
              videoUrl={lesson.content.videoUrl}
              title={lesson.title}
            />
            
            <div className="mt-6">
              <h2 className="text-xl font-semibold mb-2">Sobre esta aula</h2>
              <p className="text-gray-600">{lesson.description}</p>
              <div className="mt-4 text-sm text-gray-500">
                Duração: {lesson.content.duration}
              </div>
            </div>
          </div>
        </article>
      </main>
    </>
  );
}
=== End File ===

=== Start File ===
app/favorites/page.tsx
---
"use client";

import { useEffect, useState } from "react";
import { themes } from "@/lib/data";
import { LessonCard } from "@/components/ui/lesson-card";
import Link from "next/link";

export default function FavoritesPage() {
  const [favoriteLessons, setFavoriteLessons] = useState<any[]>([]);

  useEffect(() => {
    const favoriteIds = JSON.parse(localStorage.getItem('favoriteLessons') || '[]');
    const favorites = themes.flatMap(theme =>
      theme.lessons.filter(lesson => favoriteIds.includes(lesson.id))
    );
    setFavoriteLessons(favorites);
  }, []);

  return (
    <main className="container mx-auto px-4 py-8">
      <h1 className="main-heading">Minhas Aulas Favoritas</h1>

      {favoriteLessons.length === 0 ? (
        <div className="text-center">
          <p className="text-lg text-gray-600 mb-4">
            Você ainda não tem aulas favoritas.
          </p>
          <Link
            href="/"
            className="button-large bg-blue-600 text-white hover:bg-blue-700"
          >
            Explorar aulas
          </Link>
        </div>
      ) : (
        <div className="grid gap-4">
          {favoriteLessons.map((lesson) => (
            <LessonCard
              key={lesson.id}
              id={lesson.id}
              themeId={lesson.themeId}
              title={lesson.title}
              description={lesson.description}
            />
          ))}
        </div>
      )}
    </main>
  );
}
=== End File ===

=== Start File ===
components/ui/lesson-card.tsx
---
"use client";

import { motion } from "framer-motion";
import Link from "next/link";
import { Check } from "lucide-react";
import { useEffect, useState } from "react";

interface LessonCardProps {
  id: string;
  themeId: string;
  title: string;
  description: string;
}

export function LessonCard({ id, themeId, title, description }: LessonCardProps) {
  const [isWatched, setIsWatched] = useState(false);

  useEffect(() => {
    const watchedLessons = JSON.parse(localStorage.getItem('watchedLessons') || '[]');
    setIsWatched(watchedLessons.includes(id));
  }, [id]);

  return (
    <motion.div
      whileHover={{ scale: 1.02 }}
      whileTap={{ scale: 0.98 }}
      className="relative"
    >
      <Link 
        href={`/theme/${themeId}/lesson/${id}`}
        className="lesson-card block relative"
        role="button"
        aria-label={`Acessar aula: ${title}`}
      >
        <article className="pr-12">
          <h3 className="text-xl font-semibold mb-2">{title}</h3>
          <p className="text-gray-600">{description}</p>
        </article>
        
        {isWatched && (
          <div className="absolute right-4 top-1/2 -translate-y-1/2">
            <span className="bg-green-500 text-white p-2 rounded-full">
              <Check size={20} />
            </span>
          </div>
        )}
      </Link>
    </motion.div>
  );
}
=== End File ===

Principais alterações:

1. Adicionado VideoPlayer personalizado com:
   - Player de vídeo incorporado
   - Botão para marcar como assistido
   - Botão para favoritar
   - Estado persistido no localStorage

2. Atualizado o modelo de dados para incluir:
   - URLs de vídeo
   - Duração das aulas
   - Thumbnails

3. Adicionado indicador visual de aulas assistidas nos cards

4. Melhorada a página de favoritos para:
   - Mostrar aulas favoritadas
   - Atualizar em tempo real
   - Mostrar mensagem quando vazia

5. Adicionadas funcionalidades de:
   - Marcar/desmarcar como assistido
   - Adicionar/remover dos favoritos
   - Persistência local dos dados

Para usar:

1. Limpe o cache:
```bash
rm -rf .next .build node_modules/.cache
```

2. Reinstale as dependências:
```bash
npm ci
```

3. Execute o servidor de desenvolvimento:
```bash
npm run dev
```

Agora você tem:
- Player de vídeo funcional
- Sistema de marcação de aulas assistidas
- Sistema de favoritos
- Persistência local dos dados
- Interface atualizada com indicadores visuais
- Experiência de usuário melhorada

Você pode personalizar os vídeos alterando as URLs no arquivo `data.ts`. Atualmente está usando placeholders do YouTube, mas você pode substituir por seus próprios vídeos.